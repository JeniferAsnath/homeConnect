// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            Int            @id @default(autoincrement())
  firstName     String         @db.VarChar(255)
  lastName      String         @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  phoneNumber   String         @unique @db.VarChar(255)
  password      String
  userType      String
  bailleurs     Bailleur[]
  visitors      Visitor[]
  comments      Comment[]
  evaluations   Evaluation[]
  notifications Notification[]
}

model Bailleur {
  id           Int           @id
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  images       Images[]
  reservations Reservation[]
  House        House[]
}

model Visitor {
  id           Int           @id
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  favorites    Favorite[]
  houses       House[]
  reservations Reservation[]
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String
  city       String
  country    String
  postalCode String
  houses     House[]
}

model House {
  id           Int           @id @default(autoincrement())
  title        String
  address      Address       @relation(fields: [addressId], references: [id])
  addressId    Int
  description  String
  rent         Float
  bedrooms     Int
  bathrooms    Int
  Images       Images[]
  bailleur     Bailleur?     @relation(fields: [bailleurId], references: [id])
  bailleurId   Int?
  favorites    Favorite[]
  reservations Reservation[]
  Visitor      Visitor?      @relation(fields: [visitorId], references: [id])
  visitorId    Int?
  Comment      Comment[]
  Evaluation   Evaluation[]
}

model Images {
  id         Int       @id @default(autoincrement())
  url        String
  house      House     @relation(fields: [houseId], references: [id])
  houseId    Int
  Bailleur   Bailleur? @relation(fields: [bailleurId], references: [id])
  bailleurId Int?
}

model Favorite {
  id        Int     @id @default(autoincrement())
  visitor   Visitor @relation(fields: [visitorId], references: [id])
  visitorId Int
  house     House   @relation(fields: [houseId], references: [id])
  houseId   Int
}

model Reservation {
  id         Int       @id @default(autoincrement())
  visitDate  DateTime
  visitor    Visitor   @relation(fields: [visitorId], references: [id])
  visitorId  Int
  house      House     @relation(fields: [houseId], references: [id])
  houseId    Int
  Bailleur   Bailleur? @relation(fields: [bailleurId], references: [id])
  bailleurId Int?
}

model Comment {
  id      Int      @id @default(autoincrement())
  content String
  date    DateTime
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  house   House    @relation(fields: [houseId], references: [id])
  houseId Int
}

model Evaluation {
  id      Int      @id @default(autoincrement())
  rating  Int
  comment String?
  date    DateTime
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  house   House    @relation(fields: [houseId], references: [id])
  houseId Int
}

model Notification {
  id      Int      @id @default(autoincrement())
  type    String
  content String
  date    DateTime
  status  String
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
}
model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
}